/**
 * BitPesa API
 * Reference documentation for the BitPesa API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountValidationRequest model module.
 * @module Model/AccountValidationRequest
 * @version 0.2.0
 */
class AccountValidationRequest {
    /**
     * Constructs a new <code>AccountValidationRequest</code>.
     * @alias module:Model/AccountValidationRequest
     * @param bankAccount {String} Account Number to query
     * @param bankCode {String} Bank Code to query - same codes are used as for creating the transactions
     * @param country {module:Model/AccountValidationRequest.CountryEnum} Country of account in 2-character alpha ISO 3166-2 country format (only NG is currently supported)
     * @param currency {module:Model/AccountValidationRequest.CurrencyEnum} The currency the bank account is in
     * @param method {module:Model/AccountValidationRequest.MethodEnum} The method of the payment. Currently only bank is supported
     */
    constructor(bankAccount, bankCode, country, currency, method) { 
        
        AccountValidationRequest.initialize(this, bankAccount, bankCode, country, currency, method);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bankAccount, bankCode, country, currency, method) { 
        obj['bank_account'] = bankAccount;
        obj['bank_code'] = bankCode;
        obj['country'] = country;
        obj['currency'] = currency;
        obj['method'] = method;
    }

    /**
     * Constructs a <code>AccountValidationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:Model/AccountValidationRequest} obj Optional instance to populate.
     * @return {module:Model/AccountValidationRequest} The populated <code>AccountValidationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountValidationRequest();

            if (data.hasOwnProperty('bank_account')) {
                obj['bank_account'] = ApiClient.convertToType(data['bank_account'], 'String');
            }
            if (data.hasOwnProperty('bank_code')) {
                obj['bank_code'] = ApiClient.convertToType(data['bank_code'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Account Number to query
 * @member {String} bank_account
 */
AccountValidationRequest.prototype['bank_account'] = undefined;

/**
 * Bank Code to query - same codes are used as for creating the transactions
 * @member {String} bank_code
 */
AccountValidationRequest.prototype['bank_code'] = undefined;

/**
 * Country of account in 2-character alpha ISO 3166-2 country format (only NG is currently supported)
 * @member {module:Model/AccountValidationRequest.CountryEnum} country
 */
AccountValidationRequest.prototype['country'] = undefined;

/**
 * The currency the bank account is in
 * @member {module:Model/AccountValidationRequest.CurrencyEnum} currency
 */
AccountValidationRequest.prototype['currency'] = undefined;

/**
 * The method of the payment. Currently only bank is supported
 * @member {module:Model/AccountValidationRequest.MethodEnum} method
 */
AccountValidationRequest.prototype['method'] = undefined;





/**
 * Allowed values for the <code>country</code> property.
 * @enum {String}
 * @readonly
 */
AccountValidationRequest['CountryEnum'] = {

    /**
     * value: "NG"
     * @const
     */
    "NG": "NG",

    /**
     * value: "GH"
     * @const
     */
    "GH": "GH"
};


/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
AccountValidationRequest['CurrencyEnum'] = {

    /**
     * value: "NGN"
     * @const
     */
    "NGN": "NGN",

    /**
     * value: "GHS"
     * @const
     */
    "GHS": "GHS"
};


/**
 * Allowed values for the <code>method</code> property.
 * @enum {String}
 * @readonly
 */
AccountValidationRequest['MethodEnum'] = {

    /**
     * value: "bank"
     * @const
     */
    "bank": "bank"
};



export default AccountValidationRequest;

