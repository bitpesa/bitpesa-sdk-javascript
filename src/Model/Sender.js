/**
 * BitPesa API
 * Reference documentation for the BitPesa API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Document from './Document';
import SenderState from './SenderState';
import ValidationErrorDescription from './ValidationErrorDescription';

/**
 * The Sender model module.
 * @module Model/Sender
 * @version 0.2.0
 */
class Sender {
    /**
     * Constructs a new <code>Sender</code>.
     * This contains the details of the sender. The first time a specific sender is used the full details should be provided. Once a sender is created and is used, the next time you MUST only send the ID of the sender. This is so we can match the same sender across multiple transactions for KYC and audit purposes.  Personal Sender Example: &#x60;&#x60;&#x60;json {   \&quot;country\&quot;: \&quot;UG\&quot;,   \&quot;phone_country\&quot;: \&quot;UG\&quot;,   \&quot;phone_number\&quot;: \&quot;752403639\&quot;,   \&quot;email\&quot;: \&quot;example@home.org\&quot;,   \&quot;first_name\&quot;: \&quot;Johnny\&quot;,   \&quot;last_name\&quot;: \&quot;English\&quot;,   \&quot;city\&quot;: \&quot;Kampala\&quot;,   \&quot;street\&quot;: \&quot;Unknown 17-3\&quot;,   \&quot;address_description\&quot;: \&quot;Description of address\&quot;,   \&quot;postal_code\&quot;: \&quot;798983\&quot;,   \&quot;birth_date\&quot;: \&quot;1900-12-31\&quot;,   \&quot;documents\&quot;: [ ],   \&quot;ip\&quot;: \&quot;127.0.0.1\&quot;,   \&quot;metadata\&quot;: { } } &#x60;&#x60;&#x60;  Business Sender Example:  &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;business\&quot;,   \&quot;country\&quot;: \&quot;UG\&quot;,   \&quot;phone_country\&quot;: \&quot;UG\&quot;,   \&quot;phone_number\&quot;: \&quot;752403639\&quot;,   \&quot;email\&quot;: \&quot;example@home.org\&quot;,   \&quot;name\&quot;: \&quot;MyCompany\&quot;,   \&quot;city\&quot;: \&quot;Kampala\&quot;,   \&quot;street\&quot;: \&quot;Unknown 17-3\&quot;,   \&quot;postal_code\&quot;: \&quot;798983\&quot;,   \&quot;address_description\&quot;: \&quot;Description of address\&quot;,   \&quot;documents\&quot;: [ ],   \&quot;ip\&quot;: \&quot;127.0.0.1\&quot;,   \&quot;metadata\&quot;: { } } &#x60;&#x60;&#x60;  [Sender in the API documentation](https://github.com/bitpesa/api-documentation/blob/master/transaction-flow.md#sender)
     * @alias module:Model/Sender
     * @param country {String} Country of sender in 2-character alpha ISO 3166-2 country format
     * @param phoneCountry {String} Phone country of sender in 2-character alpha ISO 3166-2 country format
     * @param email {String} Email of sender
     * @param city {String} Sender's city
     * @param street {String} Sender's street
     * @param postalCode {String} Zip code of sender
     * @param ip {String} IP of sender
     * @param documents {Array.<module:Model/Document>} Needed for KYC checks. Required to approve the sender unless KYC is waived for your account. Please send us an empty list of documents: `\"documents\": [ ]` in the request if KYC has been waived.  If the documents already exist, please send the Document ID eg. ```JSON \"documents\": [   {     \"id\": \"b6648ba3-1c7b-4f59-8580-684899c84a07\"   } ] ```
     */
    constructor(country, phoneCountry, email, city, street, postalCode, ip, documents) { 
        
        Sender.initialize(this, country, phoneCountry, email, city, street, postalCode, ip, documents);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country, phoneCountry, email, city, street, postalCode, ip, documents) { 
        obj['country'] = country;
        obj['phone_country'] = phoneCountry;
        obj['email'] = email;
        obj['city'] = city;
        obj['street'] = street;
        obj['postal_code'] = postalCode;
        obj['ip'] = ip;
        obj['documents'] = documents;
    }

    /**
     * Constructs a <code>Sender</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:Model/Sender} obj Optional instance to populate.
     * @return {module:Model/Sender} The populated <code>Sender</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sender();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('phone_country')) {
                obj['phone_country'] = ApiClient.convertToType(data['phone_country'], 'String');
            }
            if (data.hasOwnProperty('phone_number')) {
                obj['phone_number'] = ApiClient.convertToType(data['phone_number'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('middle_name')) {
                obj['middle_name'] = ApiClient.convertToType(data['middle_name'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('occupation')) {
                obj['occupation'] = ApiClient.convertToType(data['occupation'], 'String');
            }
            if (data.hasOwnProperty('nationality')) {
                obj['nationality'] = ApiClient.convertToType(data['nationality'], 'String');
            }
            if (data.hasOwnProperty('onboarding_status')) {
                obj['onboarding_status'] = ApiClient.convertToType(data['onboarding_status'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('address_description')) {
                obj['address_description'] = ApiClient.convertToType(data['address_description'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('birth_date')) {
                obj['birth_date'] = ApiClient.convertToType(data['birth_date'], 'Date');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], [Document]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = SenderState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], {'String': [ValidationErrorDescription]});
            }
        }
        return obj;
    }


}

/**
 * Type of sender to create - either person or business (defaults to person) 
 * @member {module:Model/Sender.TypeEnum} type
 */
Sender.prototype['type'] = undefined;

/**
 * Country of sender in 2-character alpha ISO 3166-2 country format
 * @member {String} country
 */
Sender.prototype['country'] = undefined;

/**
 * Phone country of sender in 2-character alpha ISO 3166-2 country format
 * @member {String} phone_country
 */
Sender.prototype['phone_country'] = undefined;

/**
 * Phone number of sender (without country callcode)
 * @member {String} phone_number
 */
Sender.prototype['phone_number'] = undefined;

/**
 * Email of sender
 * @member {String} email
 */
Sender.prototype['email'] = undefined;

/**
 * First name of sender (used only with a Personal sender)
 * @member {String} first_name
 */
Sender.prototype['first_name'] = undefined;

/**
 * Middle name of sender (used only with a Personal sender)
 * @member {String} middle_name
 */
Sender.prototype['middle_name'] = undefined;

/**
 * Last name of sender (used only with a Personal sender)
 * @member {String} last_name
 */
Sender.prototype['last_name'] = undefined;

/**
 * Occupation of sender (used only with a Personal sender)
 * @member {String} occupation
 */
Sender.prototype['occupation'] = undefined;

/**
 * The nationality of the sender (used only with a Personal sender)
 * @member {String} nationality
 */
Sender.prototype['nationality'] = undefined;

/**
 * The onboarding status of the sender
 * @member {String} onboarding_status
 */
Sender.prototype['onboarding_status'] = undefined;

/**
 * The address of the sender
 * @member {String} address
 */
Sender.prototype['address'] = undefined;

/**
 * Description of the sender
 * @member {String} description
 */
Sender.prototype['description'] = undefined;

/**
 * Name of sender (used only with a Business sender)
 * @member {String} name
 */
Sender.prototype['name'] = undefined;

/**
 * Sender's city
 * @member {String} city
 */
Sender.prototype['city'] = undefined;

/**
 * Sender's street
 * @member {String} street
 */
Sender.prototype['street'] = undefined;

/**
 * Description of address
 * @member {String} address_description
 */
Sender.prototype['address_description'] = undefined;

/**
 * Zip code of sender
 * @member {String} postal_code
 */
Sender.prototype['postal_code'] = undefined;

/**
 * Date of birth of sender
 * @member {Date} birth_date
 */
Sender.prototype['birth_date'] = undefined;

/**
 * IP of sender
 * @member {String} ip
 */
Sender.prototype['ip'] = undefined;

/**
 * Needed for KYC checks. Required to approve the sender unless KYC is waived for your account. Please send us an empty list of documents: `\"documents\": [ ]` in the request if KYC has been waived.  If the documents already exist, please send the Document ID eg. ```JSON \"documents\": [   {     \"id\": \"b6648ba3-1c7b-4f59-8580-684899c84a07\"   } ] ```
 * @member {Array.<module:Model/Document>} documents
 */
Sender.prototype['documents'] = undefined;

/**
 * Metadata of sender. You can store any detail specific to your integration here (for example the local ID of the sender on your end). When requesting sender details you will receive the sent metadata back. Also when sending sender related webhooks you will receive the details stored here as well.
 * @member {Object} metadata
 */
Sender.prototype['metadata'] = undefined;

/**
 * @member {module:Model/SenderState} state
 */
Sender.prototype['state'] = undefined;

/**
 * @member {String} id
 */
Sender.prototype['id'] = undefined;

/**
 * The fields that have some problems and don't pass validation
 * @member {Object.<String, Array.<module:Model/ValidationErrorDescription>>} errors
 */
Sender.prototype['errors'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Sender['TypeEnum'] = {

    /**
     * value: "person"
     * @const
     */
    "person": "person",

    /**
     * value: "business"
     * @const
     */
    "business": "business"
};



export default Sender;

