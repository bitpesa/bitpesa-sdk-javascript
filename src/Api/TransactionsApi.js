/**
 * BitPesa API
 * Reference documentation for the BitPesa API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorStatus from '../Model/ErrorStatus';
import PayinMethodRequest from '../Model/PayinMethodRequest';
import TransactionListResponse from '../Model/TransactionListResponse';
import TransactionRequest from '../Model/TransactionRequest';
import TransactionResponse from '../Model/TransactionResponse';

/**
* Transactions service.
* @module Api/TransactionsApi
* @version 0.1.0
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:Api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Calculates transaction amounts for a transaction payload
     * Calculates the input, output and fee amounts for the recipients in a transaction payload
     * @param {module:Model/TransactionRequest} transactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TransactionResponse} and HTTP response
     */
    calculateTransactionsWithHttpInfo(transactionRequest) {
      let postBody = transactionRequest;

      // verify the required parameter 'transactionRequest' is set
      if (transactionRequest === undefined || transactionRequest === null) {
        throw new Error("Missing the required parameter 'transactionRequest' when calling calculateTransactions");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/transactions/calculate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Calculates transaction amounts for a transaction payload
     * Calculates the input, output and fee amounts for the recipients in a transaction payload
     * @param {module:Model/TransactionRequest} transactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TransactionResponse}
     */
    calculateTransactions(transactionRequest) {
      return this.calculateTransactionsWithHttpInfo(transactionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch a single transaction
     * Finds and returns a Transaction created by the requesting API key, using the provided Transaction ID.
     * @param {String} transactionID ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TransactionResponse} and HTTP response
     */
    getTransactionWithHttpInfo(transactionID) {
      let postBody = null;

      // verify the required parameter 'transactionID' is set
      if (transactionID === undefined || transactionID === null) {
        throw new Error("Missing the required parameter 'transactionID' when calling getTransaction");
      }


      let pathParams = {
        'Transaction ID': transactionID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/transactions/{Transaction ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Fetch a single transaction
     * Finds and returns a Transaction created by the requesting API key, using the provided Transaction ID.
     * @param {String} transactionID ID of the transaction.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TransactionResponse}
     */
    getTransaction(transactionID) {
      return this.getTransactionWithHttpInfo(transactionID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of transactions
     * Retrieves a paginated list of the Transactions created by your API key.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number to request (defaults to 1)
     * @param {Number} opts.per The number of results to load per page (defaults to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TransactionListResponse} and HTTP response
     */
    getTransactionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per': opts['per']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionListResponse;

      return this.apiClient.callApi(
        '/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of transactions
     * Retrieves a paginated list of the Transactions created by your API key.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number to request (defaults to 1)
     * @param {Number} opts.per The number of results to load per page (defaults to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TransactionListResponse}
     */
    getTransactions(opts) {
      return this.getTransactionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a fake payin for transaction
     * This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
     * @param {String} transactionID ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60;
     * @param {module:Model/PayinMethodRequest} payinMethodRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TransactionResponse} and HTTP response
     */
    payinTransactionWithHttpInfo(transactionID, payinMethodRequest) {
      let postBody = payinMethodRequest;

      // verify the required parameter 'transactionID' is set
      if (transactionID === undefined || transactionID === null) {
        throw new Error("Missing the required parameter 'transactionID' when calling payinTransaction");
      }

      // verify the required parameter 'payinMethodRequest' is set
      if (payinMethodRequest === undefined || payinMethodRequest === null) {
        throw new Error("Missing the required parameter 'payinMethodRequest' when calling payinTransaction");
      }


      let pathParams = {
        'Transaction ID': transactionID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/transactions/{Transaction ID}/payin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a fake payin for transaction
     * This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
     * @param {String} transactionID ID of the transaction to payin.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin&#x60;
     * @param {module:Model/PayinMethodRequest} payinMethodRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TransactionResponse}
     */
    payinTransaction(transactionID, payinMethodRequest) {
      return this.payinTransactionWithHttpInfo(transactionID, payinMethodRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a fake payout for transaction
     * This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
     * @param {String} transactionID ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TransactionResponse} and HTTP response
     */
    payoutTransactionWithHttpInfo(transactionID) {
      let postBody = null;

      // verify the required parameter 'transactionID' is set
      if (transactionID === undefined || transactionID === null) {
        throw new Error("Missing the required parameter 'transactionID' when calling payoutTransaction");
      }


      let pathParams = {
        'Transaction ID': transactionID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/transactions/{Transaction ID}/payout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a fake payout for transaction
     * This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
     * @param {String} transactionID ID of the transaction to payout.  Example: &#x60;/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TransactionResponse}
     */
    payoutTransaction(transactionID) {
      return this.payoutTransactionWithHttpInfo(transactionID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new transaction
     * Transactions are the main objects in the BitPesa API, so it&#39;s important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC&#39;d and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.
     * @param {module:Model/TransactionRequest} transactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TransactionResponse} and HTTP response
     */
    postTransactionsWithHttpInfo(transactionRequest) {
      let postBody = transactionRequest;

      // verify the required parameter 'transactionRequest' is set
      if (transactionRequest === undefined || transactionRequest === null) {
        throw new Error("Missing the required parameter 'transactionRequest' when calling postTransactions");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new transaction
     * Transactions are the main objects in the BitPesa API, so it&#39;s important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC&#39;d and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.
     * @param {module:Model/TransactionRequest} transactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TransactionResponse}
     */
    postTransactions(transactionRequest) {
      return this.postTransactionsWithHttpInfo(transactionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Validates a transaction payload
     * Validates fields in a transaction payload and displays invalid or missing fields
     * @param {module:Model/TransactionRequest} transactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TransactionResponse} and HTTP response
     */
    validateTransactionsWithHttpInfo(transactionRequest) {
      let postBody = transactionRequest;

      // verify the required parameter 'transactionRequest' is set
      if (transactionRequest === undefined || transactionRequest === null) {
        throw new Error("Missing the required parameter 'transactionRequest' when calling validateTransactions");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionResponse;

      return this.apiClient.callApi(
        '/transactions/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Validates a transaction payload
     * Validates fields in a transaction payload and displays invalid or missing fields
     * @param {module:Model/TransactionRequest} transactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TransactionResponse}
     */
    validateTransactions(transactionRequest) {
      return this.validateTransactionsWithHttpInfo(transactionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
