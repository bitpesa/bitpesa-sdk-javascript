/**
 * BitPesa API
 * Reference documentation for the BitPesa API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitpesaSdk);
  }
}(this, function(expect, BitpesaSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BitpesaSdk.TransactionsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TransactionsApi', function() {
    describe('calculateTransactions', function() {
      it('should call calculateTransactions successfully', function(done) {
        //uncomment below and update the code to test calculateTransactions
        //instance.calculateTransactions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTransaction', function() {
      it('should call getTransaction successfully', function(done) {
        //uncomment below and update the code to test getTransaction
        //instance.getTransaction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTransactions', function() {
      it('should call getTransactions successfully', function(done) {
        //uncomment below and update the code to test getTransactions
        //instance.getTransactions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('payinTransaction', function() {
      it('should call payinTransaction successfully', function(done) {
        //uncomment below and update the code to test payinTransaction
        //instance.payinTransaction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('payoutTransaction', function() {
      it('should call payoutTransaction successfully', function(done) {
        //uncomment below and update the code to test payoutTransaction
        //instance.payoutTransaction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postTransactions', function() {
      it('should call postTransactions successfully', function(done) {
        //uncomment below and update the code to test postTransactions
        //instance.postTransactions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('validateTransactions', function() {
      it('should call validateTransactions successfully', function(done) {
        //uncomment below and update the code to test validateTransactions
        //instance.validateTransactions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
